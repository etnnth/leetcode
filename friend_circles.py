class Solution:
    def findCircleNum(self, M):
        n = len(M)
        L = [i for i in range(n)]
        for i in range(n):
            M[i][i] = 0
        k = 0
        while k < n:
            N = [(k,i) for i in range(n) if M[k][i]>0]
            for i in range(n):
                M[k][i]=0
                M[i][k]=0
            while len(N)>0:
                i,j = N[0]
                L[j] = L[i]
                N = N[1:] + [(j,i) for i in range(n) if M[j][i]>0]
                for i in range(n):
                    M[j][i]=0
                    M[i][j]=0
            k+=1
        print(L)
        return len(set(L))




assert Solution().findCircleNum([[1,1,0],[1,1,0],[0,0,1]]) == 2
assert Solution().findCircleNum([[1,1,0],[1,1,1],[0,1,1]]) == 1
assert Solution().findCircleNum([[1,0,0,1],[0,1,1,0],[0,1,1,1],[1,0,1,1]]) == 1
M = [[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
    [0,1,0,1,0,0,0,0,0,0,0,0,0,1,0],
    [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,0,1,0,0,0,1,0,0,0,1,0,0,0],
    [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],
    [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,0,1,1,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
    [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
    [0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],
    [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],
    [0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]]
assert Solution().findCircleNum(M) == 8
